/**
 * Petman REST API
 * Petman REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Admin } from '../model/admin';
import { AdminInfo } from '../model/adminInfo';
import { Breed } from '../model/breed';
import { BreederForAdmin } from '../model/breederForAdmin';
import { MessageToBreeder } from '../model/messageToBreeder';
import { PetSelectionRequest } from '../model/petSelectionRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AdminControllerService {

    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addBreed
     * 
     * @param breed breed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBreedUsingPOST(breed: Breed, observe?: 'body', reportProgress?: boolean): Observable<Breed>;
    public addBreedUsingPOST(breed: Breed, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Breed>>;
    public addBreedUsingPOST(breed: Breed, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Breed>>;
    public addBreedUsingPOST(breed: Breed, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (breed === null || breed === undefined) {
            throw new Error('Required parameter breed was null or undefined when calling addBreedUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Breed>(`${this.basePath}/api/admin/breed`,
            breed,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createAdmin
     * 
     * @param info info
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAdminUsingPOST(info: AdminInfo, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createAdminUsingPOST(info: AdminInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createAdminUsingPOST(info: AdminInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createAdminUsingPOST(info: AdminInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (info === null || info === undefined) {
            throw new Error('Required parameter info was null or undefined when calling createAdminUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<number>(`${this.basePath}/api/admin/admin`,
            info,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBreed
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBreedUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBreedUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBreedUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBreedUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBreedUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/admin/breed/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteBreeder
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBreederUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBreederUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBreederUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBreederUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBreederUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/admin/breeder/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * editBreed
     * 
     * @param breed breed
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editBreedUsingPUT(breed: Breed, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public editBreedUsingPUT(breed: Breed, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public editBreedUsingPUT(breed: Breed, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public editBreedUsingPUT(breed: Breed, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (breed === null || breed === undefined) {
            throw new Error('Required parameter breed was null or undefined when calling editBreedUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editBreedUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/admin/breed/${encodeURIComponent(String(id))}`,
            breed,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listAdmins
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAdminsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Admin>>;
    public listAdminsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Admin>>>;
    public listAdminsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Admin>>>;
    public listAdminsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Admin>>(`${this.basePath}/api/admin/admins`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listBreeders
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBreedersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<BreederForAdmin>>;
    public listBreedersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<BreederForAdmin>>>;
    public listBreedersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<BreederForAdmin>>>;
    public listBreedersUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<BreederForAdmin>>(`${this.basePath}/api/admin/breeders`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listMessages
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listMessagesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<MessageToBreeder>>;
    public listMessagesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MessageToBreeder>>>;
    public listMessagesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MessageToBreeder>>>;
    public listMessagesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MessageToBreeder>>(`${this.basePath}/api/admin/messages`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * listRequests
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listRequestsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<PetSelectionRequest>>;
    public listRequestsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PetSelectionRequest>>>;
    public listRequestsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PetSelectionRequest>>>;
    public listRequestsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<PetSelectionRequest>>(`${this.basePath}/api/admin/petrequests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setCustomRating
     * 
     * @param id id
     * @param rating rating
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setCustomRatingUsingPUT(id: number, rating: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setCustomRatingUsingPUT(id: number, rating: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setCustomRatingUsingPUT(id: number, rating: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setCustomRatingUsingPUT(id: number, rating: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setCustomRatingUsingPUT.');
        }

        if (rating === null || rating === undefined) {
            throw new Error('Required parameter rating was null or undefined when calling setCustomRatingUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/admin/breeder/rating/${encodeURIComponent(String(id))}/${encodeURIComponent(String(rating))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAdmin
     * 
     * @param id id
     * @param info info
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdminUsingPUT(id: number, info: AdminInfo, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAdminUsingPUT(id: number, info: AdminInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAdminUsingPUT(id: number, info: AdminInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAdminUsingPUT(id: number, info: AdminInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAdminUsingPUT.');
        }

        if (info === null || info === undefined) {
            throw new Error('Required parameter info was null or undefined when calling updateAdminUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/admin/admin/${encodeURIComponent(String(id))}`,
            info,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateStatus
     * 
     * @param id id
     * @param status status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStatusUsingPUT(id: number, status: 'UNCONFIRMED' | 'ACTIVE' | 'HIDDEN' | 'BLOCKED' | 'DELETED', observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStatusUsingPUT(id: number, status: 'UNCONFIRMED' | 'ACTIVE' | 'HIDDEN' | 'BLOCKED' | 'DELETED', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStatusUsingPUT(id: number, status: 'UNCONFIRMED' | 'ACTIVE' | 'HIDDEN' | 'BLOCKED' | 'DELETED', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStatusUsingPUT(id: number, status: 'UNCONFIRMED' | 'ACTIVE' | 'HIDDEN' | 'BLOCKED' | 'DELETED', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateStatusUsingPUT.');
        }

        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateStatusUsingPUT.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/api/admin/status/${encodeURIComponent(String(id))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
