/**
 * Petman REST API
 * Petman REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Breeder } from '../model/breeder';
import { BreederAbout } from '../model/breederAbout';
import { BreederInfo } from '../model/breederInfo';
import { MessageToBreeder } from '../model/messageToBreeder';
import { ParentsInfo } from '../model/parentsInfo';
import { PuppiesInfo } from '../model/puppiesInfo';
import { Puppy } from '../model/puppy';
import { RegisterBreeder } from '../model/registerBreeder';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BreederControllerService {

    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * changePassword
     * 
     * @param password password
     * @param uuid uuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changePasswordUsingPOST(password: string, uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public changePasswordUsingPOST(password: string, uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public changePasswordUsingPOST(password: string, uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public changePasswordUsingPOST(password: string, uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling changePasswordUsingPOST.');
        }

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling changePasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/password/change/${encodeURIComponent(String(uuid))}`,
            password,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * checkPassword
     * 
     * @param uuid uuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkPasswordUsingGET(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public checkPasswordUsingGET(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public checkPasswordUsingGET(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public checkPasswordUsingGET(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling checkPasswordUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/password/check/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * confirmAgain
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmAgainUsingPOST(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public confirmAgainUsingPOST(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public confirmAgainUsingPOST(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public confirmAgainUsingPOST(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/reset/confirm`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * confirm
     * 
     * @param uuid uuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmUsingGET(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public confirmUsingGET(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public confirmUsingGET(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public confirmUsingGET(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling confirmUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/confirm/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * forgotPassword
     * 
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public forgotPasswordUsingPOST(email: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public forgotPasswordUsingPOST(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public forgotPasswordUsingPOST(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public forgotPasswordUsingPOST(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling forgotPasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/forgotpass`,
            email,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getBreeder
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBreederUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Breeder>;
    public getBreederUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Breeder>>;
    public getBreederUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Breeder>>;
    public getBreederUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBreederUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Breeder>(`${this.basePath}/api/breeder/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * me
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public meUsingGET(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public meUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public meUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public meUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/api/me`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * register
     * 
     * @param b b
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerUsingPOST(b: RegisterBreeder, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: number; }>;
    public registerUsingPOST(b: RegisterBreeder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: number; }>>;
    public registerUsingPOST(b: RegisterBreeder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: number; }>>;
    public registerUsingPOST(b: RegisterBreeder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (b === null || b === undefined) {
            throw new Error('Required parameter b was null or undefined when calling registerUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<{ [key: string]: number; }>(`${this.basePath}/api/register`,
            b,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * sendMessageToBreeder
     * 
     * @param id id
     * @param message message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMessageToBreederUsingPOST(id: number, message: MessageToBreeder, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sendMessageToBreederUsingPOST(id: number, message: MessageToBreeder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sendMessageToBreederUsingPOST(id: number, message: MessageToBreeder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sendMessageToBreederUsingPOST(id: number, message: MessageToBreeder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling sendMessageToBreederUsingPOST.');
        }

        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling sendMessageToBreederUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/breeder/message/${encodeURIComponent(String(id))}`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setAbout
     * 
     * @param about about
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAboutUsingPUT(about: BreederAbout, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setAboutUsingPUT(about: BreederAbout, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setAboutUsingPUT(about: BreederAbout, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setAboutUsingPUT(about: BreederAbout, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (about === null || about === undefined) {
            throw new Error('Required parameter about was null or undefined when calling setAboutUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setAboutUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/about/${encodeURIComponent(String(id))}`,
            about,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setGeneralInfo
     * 
     * @param breederInfo breederInfo
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setGeneralInfoUsingPUT(breederInfo: BreederInfo, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setGeneralInfoUsingPUT(breederInfo: BreederInfo, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setGeneralInfoUsingPUT(breederInfo: BreederInfo, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setGeneralInfoUsingPUT(breederInfo: BreederInfo, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (breederInfo === null || breederInfo === undefined) {
            throw new Error('Required parameter breederInfo was null or undefined when calling setGeneralInfoUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setGeneralInfoUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/general/${encodeURIComponent(String(id))}`,
            breederInfo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setParentsInfo
     * 
     * @param id id
     * @param parentsInfo parentsInfo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setParentsInfoUsingPUT(id: number, parentsInfo: ParentsInfo, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setParentsInfoUsingPUT(id: number, parentsInfo: ParentsInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setParentsInfoUsingPUT(id: number, parentsInfo: ParentsInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setParentsInfoUsingPUT(id: number, parentsInfo: ParentsInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setParentsInfoUsingPUT.');
        }

        if (parentsInfo === null || parentsInfo === undefined) {
            throw new Error('Required parameter parentsInfo was null or undefined when calling setParentsInfoUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/parents/${encodeURIComponent(String(id))}`,
            parentsInfo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setPuppiesInfo
     * 
     * @param id id
     * @param puppiesInfo puppiesInfo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPuppiesInfoUsingPUT(id: number, puppiesInfo: PuppiesInfo, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setPuppiesInfoUsingPUT(id: number, puppiesInfo: PuppiesInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setPuppiesInfoUsingPUT(id: number, puppiesInfo: PuppiesInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setPuppiesInfoUsingPUT(id: number, puppiesInfo: PuppiesInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setPuppiesInfoUsingPUT.');
        }

        if (puppiesInfo === null || puppiesInfo === undefined) {
            throw new Error('Required parameter puppiesInfo was null or undefined when calling setPuppiesInfoUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/puppiesinfo/${encodeURIComponent(String(id))}`,
            puppiesInfo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setPuppies
     * 
     * @param id id
     * @param puppies puppies
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPuppiesUsingPUT(id: number, puppies: Array<Puppy>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setPuppiesUsingPUT(id: number, puppies: Array<Puppy>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setPuppiesUsingPUT(id: number, puppies: Array<Puppy>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setPuppiesUsingPUT(id: number, puppies: Array<Puppy>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setPuppiesUsingPUT.');
        }

        if (puppies === null || puppies === undefined) {
            throw new Error('Required parameter puppies was null or undefined when calling setPuppiesUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/puppies/${encodeURIComponent(String(id))}`,
            puppies,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setPuppyDraft
     * 
     * @param id id
     * @param puppy puppy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPuppyDraftUsingPUT(id: number, puppy: Puppy, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setPuppyDraftUsingPUT(id: number, puppy: Puppy, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setPuppyDraftUsingPUT(id: number, puppy: Puppy, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setPuppyDraftUsingPUT(id: number, puppy: Puppy, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setPuppyDraftUsingPUT.');
        }

        if (puppy === null || puppy === undefined) {
            throw new Error('Required parameter puppy was null or undefined when calling setPuppyDraftUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/puppy/draft/${encodeURIComponent(String(id))}`,
            puppy,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setQuestions
     * 
     * @param id id
     * @param questions questions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setQuestionsUsingPUT(id: number, questions: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setQuestionsUsingPUT(id: number, questions: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setQuestionsUsingPUT(id: number, questions: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setQuestionsUsingPUT(id: number, questions: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setQuestionsUsingPUT.');
        }

        if (questions === null || questions === undefined) {
            throw new Error('Required parameter questions was null or undefined when calling setQuestionsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/breeder/questions/${encodeURIComponent(String(id))}`,
            questions,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
